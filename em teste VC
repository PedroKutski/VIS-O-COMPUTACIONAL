import cv2
import os
import serial
import numpy as np

# Configuração da porta serial
arduino = serial.Serial('COM11', 9600)  # Substitua 'COM11' pela porta correta

# Carregar imagens e aprender a reconhecer objetos
known_encodings = []
known_names = []

# Caminho para a pasta com suas imagens
image_dir = 'C:\\Users\\pedro\\Downloads\\teste_vc'

def augment_image(image):
    augmented_images = [image]
    rows, cols = image.shape[:2]

    # Rotacionar a imagem
    for angle in [90, 180, 270]:
        M = cv2.getRotationMatrix2D((cols/2, rows/2), angle, 1)
        rotated = cv2.warpAffine(image, M, (cols, rows))
        augmented_images.append(rotated)

    # Escalar a imagem
    for scale in [0.5, 1.5]:
        scaled = cv2.resize(image, None, fx=scale, fy=scale)
        augmented_images.append(scaled)

    return augmented_images

for filename in os.listdir(image_dir):
    if filename.endswith(('.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff', '.tif')):
        image_path = os.path.join(image_dir, filename)
        image = cv2.imread(image_path)
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        augmented_images = augment_image(gray)
        sift = cv2.SIFT_create()
        for aug_image in augmented_images:
            kp, des = sift.detectAndCompute(aug_image, None)
            known_encodings.append(des)
            known_names.append(filename.split('.')[0])  # Nome do objeto

# Inicialização da câmera
cap = cv2.VideoCapture(0)

while True:
    try:
        ret, frame = cap.read()
        if not ret:
            print("Falha ao capturar imagem da câmera")
            break

        gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        sift = cv2.SIFT_create()
        kp_frame, des_frame = sift.detectAndCompute(gray_frame, None)

        flann = cv2.FlannBasedMatcher()
        object_found = False

        for des in known_encodings:
            matches = flann.knnMatch(des, des_frame, k=2)
            good_matches = []
            for m, n in matches:
                if m.distance < 0.6 * n.distance:  # Ajuste o valor conforme necessário
                    good_matches.append(m)

            if len(good_matches) > 15:  # Ajuste o número conforme necessário
                object_found = True
                break

        if object_found:

            arduino.write(b'1')
        else:
            arduino.write(b'0')

        cv2.imshow('Video', frame)

        if cv2.waitKey(1) & 0xFF == 27:  # Pressione ESC para sair
            break

    except Exception as e:
        print(f"Ocorreu um erro: {e}")
        break

cap.release()
cv2.destroyAllWindows()
